// <auto-generated />
using System;
using App.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Scriptat.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ScriptatDBContext))]
    [Migration("20250925203211_user")]
    partial class user
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.ComponentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ElementCountALlowed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProjectCharacterLinkAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProjectElementLinkAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProjectLocationLinkAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ComponentType");
                });

            modelBuilder.Entity("App.Domain.ComponentTypeLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LinkedComponentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComponentTypeId");

                    b.ToTable("ComponentTypeLink");
                });

            modelBuilder.Entity("App.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectPartCount")
                        .HasColumnType("int");

                    b.Property<string>("ProjectSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectSummaryFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("App.Domain.ProjectElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApproveTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ApproveUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComponentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectElement");
                });

            modelBuilder.Entity("App.Domain.ProjectElementImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApproveTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ApproveUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectElementId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectElementId");

                    b.ToTable("ProjectElementImage");
                });

            modelBuilder.Entity("App.Domain.ProjectElementLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElementLinkType")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LinkedProjectElementId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectElementId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectElementId");

                    b.ToTable("ProjectElementLink");
                });

            modelBuilder.Entity("App.Domain.ProjectPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PartNo")
                        .HasColumnType("int")
                        .HasColumnName("PartNo");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectPartFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectPartIntroduction")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ProjectPartIntroduction");

                    b.Property<int?>("ProjectPartPageCount")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectPartSceneCount")
                        .HasColumnType("int");

                    b.Property<string>("ProjectPartSummary")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ProjectPartSummary");

                    b.Property<string>("ProjectPartSummaryFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectPartTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ProjectPartTitle");

                    b.Property<int?>("ProjectPartWordCount")
                        .HasColumnType("int");

                    b.Property<int>("ScriptTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ScriptTypeId");

                    b.ToTable("ProjectPart");
                });

            modelBuilder.Entity("App.Domain.ProjectPartParagraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Alignment")
                        .HasColumnType("int");

                    b.Property<bool>("CheckSceneCharacterFormat")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckSceneCharacterList")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckSceneCharacterMergedFormat")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckSceneDialog")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckSceneHeader")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckSceneLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckSceneNo")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckSceneScenario")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckSceneTime")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckSceneTransition")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FontSize")
                        .HasColumnType("float");

                    b.Property<int>("GroupCount")
                        .HasColumnType("int");

                    b.Property<string>("GroupKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighlightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBoldParagraph")
                        .HasColumnType("bit");

                    b.Property<bool>("IsItalicParagraph")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParagraph")
                        .HasColumnType("bit");

                    b.Property<double>("LeftIndentation")
                        .HasColumnType("float");

                    b.Property<double>("LeftMargin")
                        .HasColumnType("float");

                    b.Property<int?>("NextSceneParagraphTypeId")
                        .HasColumnType("int");

                    b.Property<double>("PageHeight")
                        .HasColumnType("float");

                    b.Property<double>("PageWidth")
                        .HasColumnType("float");

                    b.Property<double>("ParagraphEndPoint")
                        .HasColumnType("float");

                    b.Property<int>("ParagraphEndPointBlock")
                        .HasColumnType("int");

                    b.Property<int>("ParagraphIndex")
                        .HasColumnType("int");

                    b.Property<int>("ParagraphLenght")
                        .HasColumnType("int");

                    b.Property<double>("ParagraphStartPoint")
                        .HasColumnType("float");

                    b.Property<int>("ParagraphStartPointBlock")
                        .HasColumnType("int");

                    b.Property<string>("ParagraphText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreviousSceneParagraphTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectPartId")
                        .HasColumnType("int");

                    b.Property<double>("RightIndentation")
                        .HasColumnType("float");

                    b.Property<double>("RightMargin")
                        .HasColumnType("float");

                    b.Property<bool>("RightToLeft")
                        .HasColumnType("bit");

                    b.Property<int?>("SceneParagraphTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SimilarCharacterFormatCount")
                        .HasColumnType("int");

                    b.Property<int?>("SimilarDialogFormatCount")
                        .HasColumnType("int");

                    b.Property<int?>("SimilarScenarioFormatCount")
                        .HasColumnType("int");

                    b.Property<int?>("SimilarSceneHeaderFormatCount")
                        .HasColumnType("int");

                    b.Property<int?>("SimilarTransitionFormatCount")
                        .HasColumnType("int");

                    b.Property<double>("SpecialIndentation")
                        .HasColumnType("float");

                    b.Property<string>("UnderlineStyle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPartId");

                    b.ToTable("ProjectPartParagraph");
                });

            modelBuilder.Entity("App.Domain.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProjectTypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectType");
                });

            modelBuilder.Entity("App.Domain.Scene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndingParagraphIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationType")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("ProjectPartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SceneBreakdownEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SceneBreakdownEndUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SceneBreakdownStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SceneBreakdownStartUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SceneDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SceneNo")
                        .HasColumnType("int");

                    b.Property<string>("SceneNoText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SceneTime")
                        .HasColumnType("int");

                    b.Property<string>("SceneTimeText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SceneTransitionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SceneTransitionTypeText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartingParagraphIndex")
                        .HasColumnType("int");

                    b.Property<int?>("TransitionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPartId");

                    b.HasIndex("TransitionTypeId");

                    b.ToTable("Scene");
                });

            modelBuilder.Entity("App.Domain.SceneParagraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("ParagraphText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<int?>("SceneParagraphTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("SceneParagraphTypeId");

                    b.ToTable("SceneParagraph");
                });

            modelBuilder.Entity("App.Domain.SceneParagraphLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParagraphElementIndex")
                        .HasColumnType("int");

                    b.Property<int>("ProjectElementId")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredCount")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<int?>("SceneParagraphId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectElementId");

                    b.HasIndex("SceneId");

                    b.HasIndex("SceneParagraphId");

                    b.ToTable("SceneParagraphLink");
                });

            modelBuilder.Entity("App.Domain.SceneParagraphType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowedForUser")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SceneParagraphType");
                });

            modelBuilder.Entity("App.Domain.ScriptType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScriptType");
                });

            modelBuilder.Entity("App.Domain.TransitionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransitionValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TransitionType");
                });

            modelBuilder.Entity("App.Infrastructure.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserJobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("App.Infrastructure.AspNetUserDevices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("DeviceVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokeTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("AspNetUserDevices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.ComponentType", b =>
                {
                    b.HasOne("App.Domain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("App.Domain.ComponentTypeLink", b =>
                {
                    b.HasOne("App.Domain.ComponentType", "ComponentType")
                        .WithMany("ComponentTypeLinks")
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentType");
                });

            modelBuilder.Entity("App.Domain.Project", b =>
                {
                    b.HasOne("App.Domain.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("App.Domain.ProjectElement", b =>
                {
                    b.HasOne("App.Domain.ComponentType", "ComponentType")
                        .WithMany("ProjectElements")
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Project", "Project")
                        .WithMany("ProjectElements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("App.Domain.ProjectElementImage", b =>
                {
                    b.HasOne("App.Domain.ProjectElement", "ProjectElement")
                        .WithMany("ProjectElementImages")
                        .HasForeignKey("ProjectElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectElement");
                });

            modelBuilder.Entity("App.Domain.ProjectElementLink", b =>
                {
                    b.HasOne("App.Domain.ProjectElement", "ProjectElement")
                        .WithMany("ProjectElementLinks")
                        .HasForeignKey("ProjectElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectElement");
                });

            modelBuilder.Entity("App.Domain.ProjectPart", b =>
                {
                    b.HasOne("App.Domain.Project", "Project")
                        .WithMany("ProjectParts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.ScriptType", "ScriptType")
                        .WithMany("ProjectParts")
                        .HasForeignKey("ScriptTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ScriptType");
                });

            modelBuilder.Entity("App.Domain.ProjectPartParagraph", b =>
                {
                    b.HasOne("App.Domain.ProjectPart", "ProjectPart")
                        .WithMany("ProjectPartParagraphs")
                        .HasForeignKey("ProjectPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectPart");
                });

            modelBuilder.Entity("App.Domain.Scene", b =>
                {
                    b.HasOne("App.Domain.ProjectPart", "ProjectPart")
                        .WithMany("Scenes")
                        .HasForeignKey("ProjectPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.TransitionType", "TransitionType")
                        .WithMany("Scenes")
                        .HasForeignKey("TransitionTypeId");

                    b.Navigation("ProjectPart");

                    b.Navigation("TransitionType");
                });

            modelBuilder.Entity("App.Domain.SceneParagraph", b =>
                {
                    b.HasOne("App.Domain.Scene", "Scene")
                        .WithMany("SceneParagraphs")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.SceneParagraphType", "SceneParagraphType")
                        .WithMany("SceneParagraphs")
                        .HasForeignKey("SceneParagraphTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scene");

                    b.Navigation("SceneParagraphType");
                });

            modelBuilder.Entity("App.Domain.SceneParagraphLink", b =>
                {
                    b.HasOne("App.Domain.ProjectElement", "ProjectElement")
                        .WithMany("SceneParagraphLinks")
                        .HasForeignKey("ProjectElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.SceneParagraph", "SceneParagraph")
                        .WithMany("SceneParagraphLinks")
                        .HasForeignKey("SceneParagraphId");

                    b.Navigation("ProjectElement");

                    b.Navigation("Scene");

                    b.Navigation("SceneParagraph");
                });

            modelBuilder.Entity("App.Infrastructure.AspNetUserDevices", b =>
                {
                    b.HasOne("App.Infrastructure.ApplicationUser", "ApplicationUser")
                        .WithMany("AspNetUserDevices")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("App.Infrastructure.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("App.Infrastructure.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Infrastructure.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("App.Infrastructure.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.ComponentType", b =>
                {
                    b.Navigation("ComponentTypeLinks");

                    b.Navigation("ProjectElements");
                });

            modelBuilder.Entity("App.Domain.Project", b =>
                {
                    b.Navigation("ProjectElements");

                    b.Navigation("ProjectParts");
                });

            modelBuilder.Entity("App.Domain.ProjectElement", b =>
                {
                    b.Navigation("ProjectElementImages");

                    b.Navigation("ProjectElementLinks");

                    b.Navigation("SceneParagraphLinks");
                });

            modelBuilder.Entity("App.Domain.ProjectPart", b =>
                {
                    b.Navigation("ProjectPartParagraphs");

                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("App.Domain.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("App.Domain.Scene", b =>
                {
                    b.Navigation("SceneParagraphs");
                });

            modelBuilder.Entity("App.Domain.SceneParagraph", b =>
                {
                    b.Navigation("SceneParagraphLinks");
                });

            modelBuilder.Entity("App.Domain.SceneParagraphType", b =>
                {
                    b.Navigation("SceneParagraphs");
                });

            modelBuilder.Entity("App.Domain.ScriptType", b =>
                {
                    b.Navigation("ProjectParts");
                });

            modelBuilder.Entity("App.Domain.TransitionType", b =>
                {
                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("App.Infrastructure.ApplicationUser", b =>
                {
                    b.Navigation("AspNetUserDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
